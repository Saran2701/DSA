Find First and Last Position of Element in Sorted Array


Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.
If target is not found in the array, return [-1, -1].
You must write an algorithm with O(log n) runtime complexity.


Example 1:
Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]

Example 2:
Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]

Example 3:
Input: nums = [], target = 0
Output: [-1,-1]

Code:
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int n = nums.length;
        int ans[] = {-1,-1};
        int first_occ = first(nums,target,0,n-1);   
        if(first_occ==-1) return ans;
        int last_occ = last(nums,target,0,n-1);
        ans[0]=first_occ;
        ans[1]=last_occ;
        return ans;
    }
    static int first(int[] nums,int target,int low,int high){
        int first=-1;
        while(low<=high){
            int mid = low+(high-low)/2;
            if(nums[mid]==target){
                first = mid;
                high=mid-1;
            }
            else if(nums[mid]<target){
                low = mid+1;
            }
            else{
                high=mid-1;
            }
        }
        return first;
    }
    static int last(int nums[],int target,int low,int high){
        int last =-1;
        while(low<=high){
        int mid =low+(high-low)/2;
            if(nums[mid]==target){
                last=mid;
                low=mid+1;
            }
            else if(nums[mid]<target){
                low = mid+1;
            }
            else{
                high = mid-1;
            }
        }
        return last;
    }
}


Complexity:
Time Complexity:  O(log n) for each binary search (finding the first and last occurrence), 
                  O(log n + log n) = O(log n)
Space Complexity: O(1)
