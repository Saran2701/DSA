Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
 

Example 1:

Input: s = "()"
Output: true
Example 2:

Input: s = "()[]{}"
Output: true
Example 3:

Input: s = "(]"
Output: false



Code :
class Solution {
    public boolean isValid(String s) {
        Stack <Character> st = new Stack<>();
        int n = s.length();
        char ch[] = s.toCharArray();
        for(char c : ch){
                if(c=='(' || c== '{' || c=='['){
                    st.push(c);
                }
                else{
                    if(st.empty()) return false;
                    char top = st.peek();
                    
                    if((c==')' && top=='(') || (c=='}' && top=='{') || (c==']' && top=='[')){
                       st.pop(); 
                    }
                    else return false;
                }
        }
        if(st.empty()) {
            return true;
        }
        return false;
    }
}



Time Complexity:
The time complexity is 𝑂(𝑛), where n is the length of the string s.
Space Complexity:The space complexity is 𝑂(𝑛)
